// IMPORTANT: Do not remove the comment at all.
// Step 1: This query generator(master) agent will initially get the user's initial detailed prompt and some set of followup questions along with answers to that questions. So that agent can understand the user's question with great clarity. Now this agent must understand the exact the query user is trying to understand and learn based on the information query generator agent got. Since the user will give the agent his understanding as well as the focus of the research the user wants to do in that initial query and followup questions, the agent need to recognize the user's understanding level.
// Step 2: Then the agent need to generate very precise keywords to do serp query. These keywords must be 1-7 words long. No more words beyond 7. These queries needs to be highly precise and strategic to get the most relevant information from the internet. The agent must understand and generate queries, if hit on search engine, will very very precisely answer the exact query the user is asking. Along with the query, a very detailed long objective is also generated by the query generator agent under each serp query. That means, the agent will generate serp query with very detailed and precise objective. The serp query and the objective should make sure that, if the query is hit on the search engine and say top 10 websites results coming from the search engine, if we scrape those websites, the objective of the information is 100% met. Before generating the objective and query, the agent must make sure it understands the user query precisely.

import { generateObject } from '../ai/providers';
import { Schema, SchemaType } from '@google/generative-ai';

export interface QueryWithObjective {
    query: string;
    objective: string;
}

const QUERY_SCHEMA: Schema = {
    type: SchemaType.OBJECT,
    properties: {
        queries: {
            type: SchemaType.ARRAY,
            items: {
                type: SchemaType.OBJECT,
                properties: {
                    query: {
                        type: SchemaType.STRING,
                        description: "Short Very specific keyword to do serp query, get the website list under each query, scrape the websites and get 100% precise answer to the user's question. This must be 4-5 word max and should only use plain english."
                    },
                    objective: {
                        type: SchemaType.STRING,
                        description: "The highly detailed precise objective of the query that we generated for websites analyzing agent to scrape on and analyze whether this objective is met or not analyzing website content."
                    }
                },
                required: ["query", "objective"]
            },
        }
    },
    required: ["queries"]
};

export async function generateQueriesWithObjectives(
    context: string,
    numQueries: number
): Promise<QueryWithObjective[]> {
    try {
        const { response } = await generateObject({
            system: `You are the high quality SERP query generating agent. Your role is to analyze the user's query and followup questions list. Then generate a bunch of short very detailed serp queries that in total entirely summarizes the entire question user is asking. Such that if you scrape the list of websites that you get under each of these queires, there is 100% chance that user's question will be 100% precisely answered in great highly technical detail. Today is ${new Date().toISOString()}. Follow these instructions when responding:
    - Your serp query must be short and 100% targeted and precise that can accurately summarizes a domain of the entire question that user is aksing.
    - Use your reasoning ability to understand the user's question and asking. Then only generate the queries.
    `,
            prompt: `Given this research context, generate ${numQueries} strategic search queries to find the list of websites we can scrape and get the percise and 100% answer to the question user is asking below.

CONTEXT:
${context}
`,
            model: process.env.QUESTION_GENERATING_MODEL as string,
            generationConfig: {
                responseSchema: QUERY_SCHEMA
            }
        });

        const result = JSON.parse(response.text());

        if (!result?.queries || !Array.isArray(result.queries) || result.queries.length === 0) {
            throw new Error('No valid queries generated');
        }

        return result.queries;

    } catch (error) {
        console.error('Error generating queries:', error);
        throw error;
    }
}